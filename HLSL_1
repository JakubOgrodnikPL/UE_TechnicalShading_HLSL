float2 tex = frac(float2(uv.x * grid.x, uv.y * grid.y));

if(tex.x >= dim.x || tex.x <= -dim.x ||
tex.y >= dim.y || tex.y <= -dim.y)
return(0);

return(1);


///////////////////////////////////////////////////////////////////////

float result = 0;

for(int i=0; i<nSides; i++)
{
    for(int j=0; j<nCopies; j++)
    {
        float angle = (i/nSides) * (time) * 3.14;
        float2 pos = center + (j/nCopies) * radius *float2(cos(1-angle), sin(3*angle));
        result += length(pos-uv) < size; //draw circle
    }

}

return(result);

////////////////////////////////////////////

float result = 0;
for(int i=0; i< nSides; i++)
{
    for(int j=0; j<nCopies; j++)
    {
        float angle = (i/nSides) * sin(time*2) * (3.14 * 2);
        float2 pos = center + (j/ nCopies) * radius * float2(sin(1-angle)-sin(time), cos(1-angle)-sin(time));
        result += length(pos-uv) <size;
    }
}

outEmissive = result * float3(sin(time),0,0.1);
return(result);

/// HLSL 6 /////////////////////////////////////////////////////

// 2DCircle = length(pos-uv);
// 3DSphere = length(rayOrigin - sphereCenter) - sphereRadius;

float3 rayOrigin = 1-(viewDir - worldPos);
float3 rayStep = viewDir * -1;

float3 lightDirection = normalize(lightPos);

struct sdfShapes
{
    float donut(float3 p, float size, float cutout){
        float2 q = float2(length(p.xz) - size, p.y);
        return length(q) - cutout;
    }
};
sdfShapes sdf;

for(int i=0; i<256; i++)
{
    float dist = sdf.donut(rayOrigin, 50, 25);

    if(dist < 0.01)
    {

        float eps = 0.001;

        float3 normal = normalize(float3(
            sdf.donut(float3(rayOrigin.x + eps, rayOrigin.y, rayOrigin.z), 50, 25)
                - sdf.donut(float3(rayOrigin.x -eps, rayOrigin.y, rayOrigin.z), 50, 25),
            sdf.donut(float3(rayOrigin.x, rayOrigin.y + eps, rayOrigin.z), 50, 25)
                - sdf.donut(float3(rayOrigin.x, rayOrigin.y - eps, rayOrigin.z), 50, 25),
            sdf.donut(float3(rayOrigin.x, rayOrigin.y, rayOrigin.z + eps), 50, 25)
                - sdf.donut(float3(rayOrigin.x, rayOrigin.y, rayOrigin.z - eps), 50, 25)
        ));
        float diffuse = max(dot(normal, lightDirection), 0);
        float3 reflection = reflect(lightDirection, normal);
        float3 viewDirection = normalize(-worldPos - rayOrigin);
        float specular = pow(max(dot(reflection, viewDirection), 0), 16);
        return (diffuse * float3(1, 0, 0)) + (specular * float3(1,1,1));
    }

    opacityMask = 1;
    rayOrigin += rayStep;
}

opacityMask = 0;
return float3(0,0,0);



//////////////////////////////////////////////////////////

float3 rayStep = viewDir * -1;
float4 inputTex = Texture2DSample(texObject, texObjectSampler, uv);

for (int i = 0; i< 25; i++)
{
    if(inputTex.r > 0.1 && inputTex.g > 0.1 && inputTex.b > 0.1)
    {
        return float3(i,0,0);
    }

    uv += rayStep * 0.15;

    inputTex = Texture2DSample(texObject, texObjectSampler, uv.xy);
}

return inputTex;

//////////////////////////////////////////////////////////

float3 result = (Pick == 1.0) ? In1 :
                (Pick == 2.0) ? In2 : 
                (Pick == 3.0) ? In3 : float3(0,0,0);

return result;

///////////////////////////////////////////////////////

float3 rayStep = viewDir * -1;
float4 color;

struct texDistort
{
    float2 texScale(float2 uv, float2 scale)
    {
        float2 texScale = (uv - 0.5) * + 0.5;
        return texScale;
    }

    float2 texRotate(float2 uv, float angle)
    {
        float2x2 rotationMatrix = float2x2(cos(angle), sin(angle),
                                            -sin(angle), cos(angle));

        return mul(uv - 0.5, rotationMatrix) + 0.5;
    }

    float2 texDistortion(float2 uv, float time)
    {
        float angle = atan2(uv.y - 0.5, uv.x - 0.5);
        float radius = length(uv - 0.5);

        float distortion = 4 * sin(3 * radius + 2 * time);
        float primDist = sin(6.0 * angle) * distortion;

        return texRotate(uv, primDist);
    }

};
texDistort txd;

for (int i=0; i<5; i++)
{
    color = Texture2DSample(texObject, texObjectSampler, txd.texDistortion(uv, time));

    if(color.r > 0.1 && color.g > 0.1 && color.b > 0.1)
    {
        return color * float3 (1,0,0);
    }
    // else if(color.r > 0.01 && color.g > 0.01 && color.b > 0.01);
    // {
    //     return color * float3 (0,1,1);
    // }

    uv += rayStep * 1.5;
}

return(color);







